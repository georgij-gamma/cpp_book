enum // представляет собой альтернативный по отношению к const
// способ создания символических констант.
enum spectrum {red, orange, yellow, green, blue, violet, indigo, ultraviolet};
red == 0; ... ultraviolet == 7;
spectrum band;	// band — переменная типа spectrum
band = blue;	// blue - перечислитель == 4
/* Перечисления — целочисленные типы, и они могут быть представлены в виде
int, однако тип int не преобразуется автоматически в тип перечисления: */
++band; 			 // неправильно
int color = blue;	 // правильно, тип spectrum приводится к int
band = 3;			 // неправильно, int не преобразуется в spectrum
color = 3 + red;	 // правильно, red преобразуется в int
band = orange + red; // неправильно, операция '+' не определена для перечислителей.
band = spectrum(3);  // правильно, приведение 3 к типу spectrum
/* Конкретные значения элементов перечислений можно устанавливать явно 
посредством операция присваивания: */
enum bits {one = 1, two = 2, four = 4, eight = 8};
enum bigstep{first, second = 100, third};	// first == 0; third == 101;
enum {zero, null = 0, one, numero_uno = 1}; /* Здесь zero и null имеют значение 0, 
a one и numero_uno — значение 1.
В C++ элементам перечислений можно использовать значения типа int, long или long long.
Каждое перечисление имеет диапазон, и с помощью приведения к типу 
переменной перечисления можно присвоить любое целочисленное значение в пределах
этого диапазона, даже если данное значение не равно ни одному из перечислителей. */
enum bits {one = 1, two = 2, four = 4, eight = 8};
bits myflag;
myflag = bits(6); // правильно, потому что 6 находится в пределах диапазона
/* Для нахождения верхнего предела
выбирается перечислитель с максимальным значением. Затем ищется наименьшее
число, являющееся степенью двойки, которое больше этого максимального значения,
и из него вычитается единица. (Например, максимальное значение bigstep, как 
определено выше, равно 101. Минимальное число, представляющее степень двойки,
которое больше 101, равно 128, поэтому верхним пределом диапазона будет 127.)
Для нахождения минимального предела выбирается минимальное значение 
перечислителя. Если оно равно 0 или больше, то нижним пределом диапазона будет 0. 
Если же минимальное значение перечислителя отрицательное, используется такой же 
подход, как при вычислении верхнего предела, но со знаком минус. (Например, если
минимальный перечислитель равен -6, то следующей степенью двойки будет -8, и
нижний предел получается равным -7.)
 Входной поток cin не распознает перечислимые типы (он не может знать, как вы 
определите их), поэтому программа читает выбор как int. Когда оператор switch 
сравнивает значение int с перечислимой меткой case, он приводит перечисление к 
типу int. Точно также перечисления приводятся к int в проверочном условии цикла 
while. */
enum {red, orange, yellow, green, blue, violet, indigo};
int code;
cin >> code;
while (code >= red && code <= indigo)
{
	switch (code)
	{
		case red : cout << "Her lips were red.\n"; break;
		case orange : cout << "Her hair was orange.\n"; break;
		case yellow : cout << "Her shoes were yellow.\n"; break;
		case green : cout << "Her nails were green.\n"; break;
		case blue : cout << "Her sweatsuit was blue.\n"; break;
		case violet : cout << "Her eyes were violet.\n"; break;
		case indigo : cout << "Her mood was indigo.\n"; break;
		}
cout << "Enter color code (0-6) : ";
cin >> code;
}

/*










