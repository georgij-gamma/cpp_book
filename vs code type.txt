int is 4 bytes.
short is 2 bytes.
long is 4 bytes.

long long is 8 bytes.

Maximum values:
int: 2147483647
short: 32767
long: 2147483647
long long: 9223372036854775807

Minimum int value = -2147483648
Bits per byte = 8

//* Методы форматирования*//
 // устанавливает флаг, который инструктирует cout отображать true и false вместо 1 и 0:
std::cout.setf(ios_base::boolalpha);

 // предотвратит переключение на экспоненциальную запись для больших чисел и заставит 
 // отображать шесть цифр справа от десятичной точки:
std::cout.setf(ios_base::fixed, ios_base::floatfield); 

std::cout.precision(3); // оператор заставляет cout выводить три десятичных знака после точки
std::streamsize prec = std::cout.precision(3); // сохранение предыдущего значения точности
std::cout.precision(prec); // восстановление предыдущего значения

std::ios_base::fmtflags orig = std::cout.setf(std::ios_base::fixed); // Сохранение исходных флагов
std::cout.setf(orig, std::ios_base::floatfield); // Восстановление сохраненных значений
 /* fmtflags — это тип, определенный в классе iosbase. orig хранит все флаги, и оператор сброса
 // использует эту информацию для восстановления установок в разделе floatfield, который включает
 // флаги для нотации с фиксированной точкой и экспоненциальной нотации.
	Метод */ setf () /* позволяет устанавливать различные состояния форматирования.
Например, при вызове метода: */
setf (ios_base :: fixed) /* объект переводится в режим
использования фиксированной десятичной точки.*/
//При вызове метода
setf (ios_base :: showpoint) /* объект переводится в режим 
отображения завершающей десятичной точки, даже если последующие 
цифры являются нулями.
	Метод */ precision () /*, указывает количество цифр, отображаемых справа от 
десятичной точки (если объект выводится в режиме fixed).
	Вызов метода */ width () /*, позволяет установить ширину поля для следующей 
операции вывода.*/
ostream & os; /* параметр типа ostream & может ссылаться на объект ostream, 
такой как cout, и на объект ofstream, подобный fout.*/
ios_base::fmtflags initial; // имя типа данных, необходимых для хранения информации.
initial = os.setf(ios_base::fixed); // сохранение исходного состояния форматирования
...
os.setf(initial); // восстановление исходного состояния форматирования*/
