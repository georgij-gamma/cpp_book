/* Статический член класса обладает особым свойством: программа
создает только одну копию статической переменной класса независимо
от количества создаваемых объектов.
Если, к примеру, создано десять объектов StringBad, то в них будут 
содержаться десять членов str и десять членов lеп, но лишь один общий член num_strings
(рис. 12.1). Это удобно для данных, которые являются закрытыми для класса, но при
этом должны иметь одно общее значение для всех объектов класса. Например, член
num_strings предназначен для отслеживания количества создаваемых объектов. */
class StringBad
{
private:
	char * str;
	int len;
	static int num_strings; // статический член класса
public:
...
};
/* Следующий оператор устанавливает первоначальное значение 0 для статического
члена num_strings: */
int StringBad::num_strings = 0; /* При инициализации используется операция разрешения 
контекста, чтобы указать, к какому классу принадлежит статический член.
 Статическую переменную-член нельзя инициализировать внутри объявления класса.
Объявление — это описание того, как выделяется память, но не само выделение. Память 
выделяется и инициализируется при создании объекта на основе данного формата. 
Для статического члена класса осуществляется независимая инициализация — с помощью 
отдельного оператора вне объявления класса. Это объясняется тем, что статический 
член класса хранится не в составе объектов. Оператор инициализации задает тип и 
указывает область действия, но не содержит ключевое слово static.
 Исключение, когда статические данные-члены все-таки инициализируются внутри 
объявления класса — если статический член данных определяется как  константа 
целочисленного или перечислимого типа.
 Каждый конструктор содержит выражение num_strings++. Это значит, что 
каждый раз, когда программа создает новый объект, общая переменная num_strings
увеличивается на единицу, т.е. всегда содержит общее количество объектов String.
А деструктор содержит выражение — num_strings. Таким образом, класс String 
отслеживает не только создание, но и удаление объектов, храня в переменной 
num_strings их текущее количество.
 Указатель строки можно передать конструктору при инициализации объекта: */
String boston("Boston");
/* Затем конструктор должен выделить объем памяти, достаточный для хранения
строки, и скопировать строку в это место. */
StringBad::StringBad(const char * s)
{
  len = std::strlen(s);             // установка размера
  str = new char[len + 1];          // выделение памяти
  std::strcpy(str, s);              // инициализация указателя
  num_strings++;                    // счетчик объектов
  std::cout << num_strings << ": \"" << str
			<< "\" object created\n"; // для целей отладки
}
/* Применяется операция new, чтобы выделить память, достаточную для хранения строки, 
и адрес этого участка памяти заносится в член str. Поскольку функция strlen() 
возвращает длину строки без завершающего нулевого символа, конструктор увеличивает 
len на единицу, чтобы уместить строку с нулевым символом. Функция strcpy() для 
копирования передаваемой строки в новый участок памяти. Затем обновляется счетчик 
объектов. Строка не хранится в объекте. Символы находятся отдельно, в куче, а сам 
объект просто указывает, где их найти. */
str = s; // не делайте так:
// Этот код просто сохраняет адрес, но не создает копию строки.
StringBad::~StringBad()	// необходимый деструктор
{
    std::cout << "\"" << str << "\" object deleted, "; // для целей отладки
    --num_strings;							// является обязательным
    std::cout << num_strings << " left\n";	// для целей отладки
    delete[] str;							// является обязательным
}
/* Операция delete необходима. Ведь член str указывает на память, выделенную 
операцией new. При уничтожении объекта StringBad исчезает и указатель str. 
Однако память, на которую указывал str, остается выделенной, пока не будет 
освобождена операцией delete. Удаление объекта освобождает память, занимаемую 
самим объектом, но при этом не освобождается автоматически память, адресованная 
указателями, которые были членами объекта. Для этого нужно использовать деструктор. 
Операция delete в деструкторе перед удалением объекта освобождает память, 
выделенную в конструкторе операцией new. Если использовалась операция new[] 
(с квадратными скобками), то нужно применять операцию delete[] (тоже с квадратными 
скобками).
Рассмотрим следующую строку: */
StringBad sailor = sports;
/* Какой конструктор здесь используется? Не конструктор по умолчанию и не 
конструктор с параметром const char *. Вспомните, что инициализация, применяющая
данную форму, должна иметь другой синтаксис: */
StringBad sailor = StringBad(sports); // конструктор, использующий sports
/* Поскольку объект sports имеет тип StringBad, соответствующий конструктор
должен обладать следующим прототипом: */
StringBad(const StringBad &);
/* Оказывается, что компилятор автоматически генерирует этот конструктор 
(называемый конструктором копирования, поскольку он создает копию объекта), если 
один объект инициализируется другим. Автоматически сгенерированной версии 
конструктора ничего не известно про обновление статической переменной num_strings, 
поэтому подсчет и нарушается. Так что все проблемы, обнаруженные в данном 
примере, возникли из-за функций-членов, которые компилятор генерирует автоматически.
Давайте рассмотрим данную тему.
	Специальные функции-члены.
 Cпециальных функци-члены определяются автоматически.
C++ автоматически предоставляет следующие функции-члены:
• конструктор по умолчанию, если не было определено ни одного конструктора;
• деструктор  по умолчанию, если он не был определен;
• конструктор копирования,  если он не был определен;
• операция присваивания, если она не была определена;
• операция взятия адреса, если она не была определена. 
 Неявная операция взятия адреса возвращает адрес вызывающего объекта (т.е. значение 
указателя this). В С++11 предлагаются еще две специальные функции-члена —
конструктор переноса и операция присваивания с переносом.
	Конструкторы копирования
 Используется во время инициализации — в том числе при передаче функции аргументов 
по значению — но не во время обычного присваивания. Конструктор копирования для 
класса обычно имеет следующий прототип: */
Имя_класса(const Имя_класса &);
/* Обратите внимание, что в качестве аргумента он принимает константную ссылку
на объект класса: */
StringBad(const StringBad &);
/* О конструкторе копирования нужно знать два момента: когда он используется и
что он делает. Когда:
 Когда новый объект явно инициализируется существующим объектом. Например, если 
motto является объектом StringBad, то следующие четыре объявления вызывают конструктор 
копирования: */
StringBad ditto(motto);				// вызывает StringBad(const StringBad &)
StringBad metoo = motto;			// вызывает StringBad(const StringBad &)
StringBad also = StringBad(motto);	// вызывает StringBad(const StringBad &)
StringBad * pStringBad = new StringBad(motto); // вызывает StringBad(const StringBad &)
/* Приведенный выше код инициализирует анонимный объект значением motto и присваивает 
адрес нового объекта указателю pstring. Компилятор использует конструктор копирования при
каждом генерировании копии объекта в программе. Компилятор также использует 
конструктор копирования при генерировании временных объектов. Например, компилятор 
может генерировать временный объект Vector для хранения промежуточного результата 
при сложении трех объектов Vector.
Следующий вызов функции void callme2(StringBad sb): */ 
callme2(headline2); /* запускает конструктор копирования, который применяется для
инициализации sb — формального параметра типа StringBad для функции callme2().
 Что делает:
 Конструктор копирования по умолчанию выполняет почленное копирование нестатических членов, 
также иногда называемое поверхностным копированием. Каждый член копируется по значению. */
StringBad sailor = sports;
/* эквивалентен следующему коду (который, правда, не скомпилируется по причине 
запрета доступа к закрытым членам): */
StringBad sailor;
sailor.str = sports.str;
sailor.len = sports.len;
/* Если член сам является объектом класса, для копирования одного объекта-члена в
другой используется конструктор копирования этого класса. Но это не влияет на 
статические члены, подобные num_strings, поскольку они принадлежат классу вообще,
а не отдельным объектам. Конструктор копирования по умолчанию никак не проявляет себя: 
не объявляет о создании объектов и не увеличивает счетчик num_strings.
Однако деструктор обновляет счетчик и вызывается вплоть до уничтожения всех 
объектов, независимо от способа их создания. Для решения этой проблемы необходим 
явный конструктор копирования, который обновляет счетчик: */
String::String(const String & s)
{
	num_strings++;
	... // существенный код
}
/* Если в классе имеется статические данные-члены, значение которых изменяется при 
создании новых объектов, должен быть предусмотрен явный конструктор копирования, который
принимает это во внимание.
 Неявный конструктор копирования осуществляет копирование по значению. Например: */
sailor.str = sports.str; // копирует не строку, а указатель на строку
/* То есть после того какобъекту sailor присвоено первоначальное значение sports, 
появилось два указателя на одну и ту же строку. Это не проблема, когда функция 
operator<<() использует указатель для вывода строки. Но это становится проблемой, 
когда вызывается деструктор. Ведь деструктор StringBad освобождает память, на которую 
указывает указатель str. Результат уничтожения sailor: */
delete[] sailor.str; // удаляется строка, на которую указывает ditto.str
/* Указатель sailor, str указывает на строку "Spinach Leaves Bowl for Dollars",
поскольку ему присвоено значение sports.str, которое указывает на данную 
строку. А после этого уничтожается объект sports: */
delete[] sports.str; // результат не определен
/* Здесь sports.str указывает на то поле памяти, которое уже очищено 
деструктором для объекта sailor — и поведение программы становится неопределенным или
даже разрушительным. 
 Для устранения проблем в структуре класса следует выполнять глубокое копирование.
Вместо простого копирования адреса строки конструктор копирования должен создать 
дубликат строки и присвоить адрес этого дубликата члену str. Тогда каждый объект 
получает собственную строку вместо ссылки на строку другого объекта, при каждом 
вызове деструктора освобождаются различные строки, и не происходит попыток повторного 
освобождения одной и той же строки. */
StringBad::StringBad(const StringBad & st) // явный конструктор копирования
{
	num_strings++;				// обновление статического члена
	len = st.len;				// та же самая длина
	str = new char [len + 1];	// выделение памяти
	std::strcpy(str, st.str);	// копирование строки в новое место
	cout << num_strings << ": \"" << str << "\" object created\n"; // для целей отладки
}
/* Определение конструктора копирования необходимо из-за того, что некоторые
члены класса являются указателями на данные, инициализированными операцией
new, а не самими данными. Если класс содержит члены, которые являются указателями, 
инициализированными операцией new, потребуется определить конструктор копирования, 
копирующий данные, на которые указывают указатели, а не сами указатели. Это называется 
глубоким копированием. Альтернативная форма копирования (почленное или поверхностное 
копирование) просто копирует значения указателей. Поверхностная копия — это только 
"наружное соскабливание" информации указателя для копирования, а не "глубокая добыча", 
требующая копирования конструкций, на которые указывают указатели.
	Операции присваивания.
 Подобно тому, как ANSI С разрешает присваивание структур, C++ допускает присваивание 
объектов класса. Это делается за счет автоматической перегрузки операции присваивания 
для класса, которая имеет следующий прототип: */
Имя_класса & Имя_класса::operator=(const Имя_класса &);
// Она принимает и возвращает ссылку на объект класса. Например:
StringBad & StringBad::operator=(const StringBad &);
/*	Когда:
 Перегруженная операция присваивания используется при присваивании одного
объекта другому существующему объекту: */
StringBad headline1.("Celery .Stalks at Midnight");
StringBad knot;
knot = headline1; // вызывается операция присваивания
// При инициализации объекта операция присваивания не обязательна:
StringBad metoo = knot; // используется конструктор копирования, но возможно и присваивание
/* Как и в случае конструктора копирования, неявная реализация операции 
присваивания выполняет почленное копирование. Если какой-то член сам является объектом
некоторого класса, то программа использует операцию присваивания, определенную
для данного класса, чтобы выполнить копирование для данного конкретного члена.
На статические члены данных это не распространяется.
	Где: */
knot = headline1; // присваивание
/* Здесь присутствует та же проблема, что и с неявным конструктором 
копирования — запорченные данные. И снова все упирается в почленное копирование, 
когда и headlinel.str, и knot.str указывают на один и тот же адрес. При вызове 
деструктора для knot строка "Celery Stalks at Midnight" удаляется, а при вызове 
деструктора для headlinel программа пытается удалить уже удаленную строку.
	Исправление присваивания.
• Поскольку целевой объект может ссылаться на данные, для которых уже была
распределена память, функция должна использовать операцию delete[] для
ее освобождения.
• Функция должна содержать защиту от присваивания объекта самому себе —
иначе вышеописанное освобождение памяти может стереть содержимое объекта до
того, как оно будет переустановлено.
• Функция возвращает ссылку на вызывающий объект.
Возвращая объект, функция может эмулировать цепочку обычных присваиваний для 
встроенных типов. То есть если S0, S1 и S2 являются объектами StringBad, то: */
S0 = S1 = S2;
// В нотации с помощью функций это выглядит так:
S0.operator = (S1.operator = (S2));
/* Таким образом, значение, возвращаемое функцией S1.operator = (S2), 
становится аргументом функции S0.operator = (). Поскольку возвращаемое значение 
является ссылкой на объект String, это корректный тип аргумента. */
StringBad & StringBad::operator=(const StringBad & st) // операция присваивания
{
	if (this == &st)				// присваивание объекта самому себе
		return *this;			// все готово
	delete[] str;				// освобождение старой строки
	len = st.len;
	str = new char[len + 1] ;	// выделение памяти для новой строки
	std::strcpy(str, st.str);	// копирование строки
	return *this;				// возврат ссылки на вызывающий объект
}
/* Сначала код проверяет, не выполняется ли присваивание самому себе. Для этого
адрес в правой части присваивания (&st) сравнивается с адресом принимающего 
объекта (this). Если они совпадают, функция возвращает *this и завершает работу. 
 Иначе функция переходит к освобождению памяти, на которую указывает str.
Ведь после этого указателю str будет присвоен адрес новой строки. Если не 
выполнить сначала операцию delete, то предыдущая строка останется в памяти, а 
поскольку указатель на старую строку уже не существует, память будет занята зря.
Далее функция действует как конструктор копирования: выделяет достаточный
объем памяти для новой строки и копирует строку из объекта в правой части в новое
место. После этого функция возвращает *this и завершается. Присваивание не создает 
новый объект, поэтому корректировать значение статического члена данных num_strings 
не нужно.
 Новый конструктор по умолчанию выглядит следующим образом: */
String::String()
{
	len = 0;
	str = new char[1];
	str[0] = '\0';	// строка по умолчанию
}
// Почему в коде применяется оператор:
str = new char[1];
// а не:
str = new char;
/* Обе формы выделяют одинаковый объем памяти. Различие состоит в том, что 
первая форма совместима с деструктором класса delete[] str;, а вторая нет.
Использование операции delete[] совместимо с указателями, инициализированными 
операцией new[], и с нулевым указателем. Поэтому еще одним вариантом 
является замена кода. */
str = new char[1];
str[0] = '\0'; // строка по умолчанию
// кодом
str = 0; // теперь str — нулевой указатель
/* Результат использования delete[] с любыми указателями, инициализированными
любым другим способом, не определен: */
char words[15] = "bad idea";
char * p1 = words;
char * p2 = new char;
char * p3;
delete[] p1; // не определено, поэтому не делайте так
delete[] р2; // не определено, поэтому не делайте так
delete[] р3; // не определено, поэтому не делайте так
/* Иногда программисты употребляют конструкцию (void *) 0, чтобы подчеркнуть, 
что это именно указатель. (Сам нулевой указатель может иметь и ненулевое внутреннее 
представление.) Другие программисты используют макрос NULL, определенный в языке С 
для представления нулевого указателя. Но эти решения все-таки неполны. В С++11 
введено лучшее решение — ключевое слово nullptr, которое означает нулевой указатель. */
str = nullptr; // нотация нулевого указателя в C++11
/*	Члены для сравнений.
Функция operator<() возвращает значение true, если первая строка идет раньше второй 
в алфавитном порядке (точнее, в машинной последовательности сопоставления). 
strcmp() возвращает отрицательное значение, если первый аргумент предшествует второму 
по алфавиту; 0, если строки одинаковые, и положительное значение, если первая строка 
по алфавиту следует за второй. */
bool operator<(const String &stl, const String &st2)
{
	if (std::stremp(stl.str, st2.str) > 0)
		return true;
	else
		return false;
}
/* Поскольку встроенная операция > уже возвращает значение типа bool, можно 
дополнительно упростить код: */
bool operator<(const String &stl, const String &st2)
{
	return (std::strcmp(stl.str, st2.str) < 0);
}
// По аналогии можно записать и две остальные функции сравнения:
bool operator>(const String &stl, const String &st2)
{
	return st2.str < stl.str;
}
bool operator==(const String &stl, const String &st2)
{
	return (std:istremp(stl.str, st2.str) == 0);
}
/* Первое определение выражает операцию > через операцию < и может служить 
хорошим кандидатом на встроенную функцию. Создание дружественных функций 
сравнения облегчает сравнение объектов String и стандартных строк С. 
 Пусть, например, answer — объект String, и имеется следующий код: */
if ("love" == answer)
// Он транслируется в такой код:
if (operator==("love", answer))
/* Затем компилятор использует один из конструкторов для преобразования кода
к следующему виду: */
if (operator==(String("love"), answer)) // И это как раз соответствует прототипу.














